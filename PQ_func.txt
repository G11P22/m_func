[fnClear=(tbl,optional shp,optional clearData, optional clearColumn, optional clearRows)=>
   [tr=Table.TransformColumns(tbl,{},Text.From),
    t= if  shp is null  then tbl else Table.Skip(tr,(r)=>not Text.Contains(Text.Combine(List.Select(Record.ToList(r),(x)=>x is text)),shp)),
    p= if clearData is null then t else   [k=(x)=>if x=null then x else  Text.Combine(List.RemoveMatchingItems(Text.SplitAny(Text.Clean(x),clearData),{""})," "),
    to=Table.TransformColumns(t,{},k)][to],
    cl=if clearColumn is null then p else 
    [a = List.Sort(Table.ColumnNames(p)),
    b = Table.Profile(p,{{"tmp", (x)=>true,List.NonNullCount}})[tmp],
    c = List.PositionOf(b,0,Occurrence.All),
    d = List.Transform(c,(x)=>a{x}),
    e = Table.RemoveColumns(p,d)][e],
    to=if clearRows is null then cl else  Table.SelectRows(cl, each not List.IsEmpty(List.RemoveMatchingItems(Record.FieldValues(_), {"", null})))][to],

  fnParsHead=(table,num,optional delim,optional fill)=>
       [
         lst = List.Buffer(Table.ToColumns(Table.Range(table,0,num))), 
        delim = if delim=null then " " else delim,
        f=(x,y)=>List.Accumulate(   List.Zip({x,y}),
                                    [i=false,j={}],
                                    (s,c)=>[i=s[i]=true or c{0}<>null,j=if i then s[j]&{c{0}} else s[j]&{c{0}??c{1}}]
                                )[j],
        g=(x)=>if fill=null then Text.Combine(x,delim) else Text.Combine(List.ReplaceValue(x,null,fill,Replacer.ReplaceValue),delim), 
        gen = List.Generate(    ()=>[i=0,l=lst{i},o=l],
                                (x)=>x[i]<List.Count(lst),
                                (x)=>[i=x[i]+1,l=lst{i},o=f(l,x[o])],
                                (x)=>g(x[o])
                            ),
        out = Table.RenameColumns(Table.Range(table,num),List.Zip({Table.ColumnNames(table),gen}))][out],


TableToBinaryText = (tbl as table) as text=>
    [
      json = Json.FromValue(tbl),
      bin = Binary.From(json),
      compr = Binary.Compress(bin,Compression.Deflate),
      txt = Binary.ToText(compr)][txt],

TableFromBinaryText = (txt as text) as table =>
    [
      bin = Binary.FromText(txt),
      dec = Binary.Decompress(bin,Compression.Deflate),
      json = Json.Document(dec),
      tbl = Table.FromRecords(json)][tbl],

ProdactionCalc=(optional year as nullable number) =>
   [path = "http://www.consultant.ru/law/ref/calendar/proizvodstvennye/",
    yr = year??Date.Year(DateTime.LocalNow()), 
    from = Text.FromBinary(Web.Contents(path&Text.From(yr)&(if yr = 2020 then "b" else ""))),
    splt = List.Skip(Text.Split(from,"#(tab,tab,tab)<td class=")),
    lst=List.Zip({{1..12},splt}),
    f=(x)=>[a=Text.Split(x{1},"<td class="),
            b=List.Select(a,(x)=>not Text.Contains(x,"inactively")),
            c=List.Transform(b,(x)=>List.Range(Text.SplitAny(x,"><"),0,2))][c],
    g=(x,y)=>{#date(yr,x{0},Number.From(y{1})),Text.Remove(y{0},"""")},
    tr=List.TransformMany(lst,f,g),
    tbl=Table.FromList(tr,(x)=>x,type table [Date=date,DateType=text])][tbl],

fnUnzip=[func=(ZIP, optional options)=>
    [
    encod = [a=options[Encoding]?,b=if a = null then 866 else a][b],
    compr = (x)=> if x =0 then Compression.None else Compression.Deflate,

    u16 =BinaryFormat.ByteOrder(BinaryFormat.UnsignedInteger16,ByteOrder.LittleEndian),
    u32 =BinaryFormat.ByteOrder(BinaryFormat.UnsignedInteger32,ByteOrder.LittleEndian),

    get=(x)=>BinaryFormat.Record(
        if Binary.Range(x,0,4)=#binary({0x50,0x4b,0x03,0x04})
        then [  Name=BinaryFormat.Text(u16(Binary.Range(x,26,2)),encod),
                Extr=BinaryFormat.Binary(u16(Binary.Range(x,28,2))),
                Value=BinaryFormat.Transform(BinaryFormat.Binary(u32(Binary.Range(x,18,4))),(y)=>Binary.Decompress(y,compr(u16(Binary.Range(x,8,2)))))]
        else []
    ),

    lst = BinaryFormat.List(BinaryFormat.Choice(BinaryFormat.Binary(30),get),(x)=>x<>[])(ZIP),
    to = Table.FromRecords(List.RemoveLastN(lst,1),type table [Name=text,Value=binary])][to],

typ =type function (ZIP as (type binary meta [Documentation.FieldCaption="ZIP - бинарное содержимое (zip, xlsx, docx, pptx и т.д.)"]), optional options as record) as table meta 
            [Documentation.Name = "fnUnzip (@buchlotnik)",
            Documentation.LongDescription ="функция fnUnzip (@buchlotnik) считывает содержимое архива и возвращает таблицу с полями:<p> <b>Name</b> - имя файла (с путём к файлу) <p><b>Value</b> - бинарное содержимое файла. <p>Необязательный аргумент <b>options</b> на текущий момент поддерживает следующие поля: <p>1) <b>Encoding</b> - требуется для корректного чтения не латинских имён файлов (по умолчанию <b>866 - кириллица</b>)"],

result = Value.ReplaceType(func,typ)][result],
fxGetMCode=(file)=>
    [u32 = BinaryFormat.ByteOrder(BinaryFormat.UnsignedInteger32,ByteOrder.LittleEndian),
    f=(x)=>[a=Text.Split(x," = "),b={Text.Trim(Text.Replace(a{0},"shared","")),Text.Combine(List.Skip(a)," = ")}][b],
    from = fnPQ[fnUnzip](file){[Name="customXml/item1.xml"]}?[Value]?,
    bin = Binary.FromText(Xml.Document(from){0}[Value],BinaryEncoding.Base64),
    data = BinaryFormat.Choice(BinaryFormat.Binary(8),(x)=>BinaryFormat.Binary(u32(Binary.Range(x,4,4))))(bin),
    unz = fnPQ[fnUnzip](data){[Name="Formulas/Section1.m"]}[Value],
    txt = Text.FromBinary(unz)&"#(cr,lf)",
    splt = Text.Split(txt,";#(cr,lf)"),
    lst = List.Range(splt,1,List.Count(splt)-2),
    tbl = Table.FromList(lst,f,{"Name","Value"}),
    to = if from=null then #table({"Name","Value"},{{null,null}}) else tbl][to]

]
